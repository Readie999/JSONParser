/**
* A Scanner for JSON files
*/
package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;

%%

%class Lexer
%implements sym
%public
%unicode
%line
%column
%cup
%char
%{
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
%}

Newline    = \r | \n | \r\n
Whitespace = [ \t\f] | {Newline}
Number     = (0|-?[1-9][0-9]*)\.?([0-9]*)((E|e)[+-]?([0-9]*))?
//regex for all numbers possible in JSON 

UnicodeCharacter = [^\"\\]
// allUnicode characters bar \ and "

Character = \\[\"\\\/bfnrtu]|\\u[a-fA-F0-9]{4}|{UnicodeCharacter}
/* The first part of the above regex allows for any of the following characters /"\bfnrtu which 
are preceded by a /. The second or allows for \u followed by 4 hexadecimal digits.
The final or allows for any unicode character bar \ or " (unless they are preceded by a \)
*/

/* comments - auto generated by the example in eclipse plug-in*/
Comment = {TraditionalComment} | {EndOfLineComment}
TraditionalComment = "/*" {CommentContent} \*+ "/"
EndOfLineComment = "//" [^\r\n]* {Newline}
CommentContent = ( [^*] | \*+[^*/] )*

ident = ([:jletter:] | "_" ) ([:jletterdigit:] | [:jletter:] | "_" )*


%eofval{
    return symbolFactory.newSymbol("EOF",sym.EOF);
%eofval}

%%  
//yyinitial forces the input to begin with { and end with } - otherwise an error is displayed.
<YYINITIAL> "{"                  { return symbolFactory.newSymbol("Left curly bracket", sym.LCURLY); }
<YYINITIAL> "}"                  { return symbolFactory.newSymbol("Right curly bracket", sym.RCURLY); }

// Belw
<YYINITIAL> {
  {Whitespace} {   /* Ignore all whitespace */                             }
  \"			{ return symbolFactory.newSymbol("QUOTE", QUOTE); }
  "," 			{ return symbolFactory.newSymbol("COMMA", COMMA); }
  ":" 			{ return symbolFactory.newSymbol("COLON", COLON); }
  "["          { return symbolFactory.newSymbol("LSQ", LSQ); }
  "]"          { return symbolFactory.newSymbol("RSQ", RSQ); }
  "null"       { return symbolFactory.newSymbol("NULL", NULL); }
  "true"       { return symbolFactory.newSymbol("TRUE", TRUE, new Boolean(yytext())); }
  "false"      { return symbolFactory.newSymbol("FALSE", FALSE, new Boolean(yytext())); }
  {Number}     { return symbolFactory.newSymbol("NUMBER", NUMBER, new Double(yytext())); }
  {Character} { return symbolFactory.newSymbol("CHAR", CHAR, new String(yytext())); }
}
//Note Number and Character are defined as regular expressions earlier in the code.

// catch all errors
.          { System.err.println("Illegal character: "+yytext()); }
